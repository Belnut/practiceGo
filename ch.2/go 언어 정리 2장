go 언어 정리 2장

Go 컴파일러

Go컴파일러는 Go 컴파일러로 실행됨

go tool complie 파일명.go
go언어(.go) -> 오브젝트(.o)로 컴파일하게 된다.

-pack
go언어(.go) -> 아카이브(.a)로 컴파일하게 된다.

아카이브 : 바이러니 파일, 여러파일을 하나의 파일로 묶을때 사용

-race
경쟁상대 확인

가비지 컬렉션
더이상 사용하지 않는 메모리 공간을 자동으로 해제해주는 프로세스
1. 현재 스코프를 벗어난 오브젝트
2. 더이상 참조할 일이 없다고 판단되는 오브젝트

GODEBUG=gctrace=1 옵션을 넣어 실시간 추적 가능

삼색알고리즘에 따라 작동한다
힙에 있는 오브젝트를 이 알고리즘에 따라 세가지 색깔로 지정된 집합으로 나눈다
백색집합 : 프로그램에 더이상 접근하지 못해 수거 대상이 되는 오브젝트
흑색집합 : 프로그렘이 사용하고 있으며, 흰색 집합에 포함되는 대상을 가리키는 포인터가 없는 오브젝트
회색집합 : 프로그램이 현재 사용중이나 흰색 오브젝트르 가리킬 수도 있어 검사가 필요한 오브젝트

흑색집합은 백색 집합으로 바로 갈 수 없음
이로서 
1.백색집합은 바로 확인 후 제거가 가능함
2.흑색집합의 오브젝트는 흰색집합 오브젝트를 가질 수 없음

GC는 
1.모든 오브젝트가 백색으로 시작하며, 
2.루트오브젝트(스택, 전역변수같은 애플리케이션에서 직접 접근이 가능한 오브젝트)를 방문해서 회색으로 칠해진다
3.2에서 칠한 회색 오브젝트를 하나씩 뽑아서 흑색으로 칠한다.
4.만약 회색 오브젝트가 백색 오브젝트를 가리키는 포인터가 있다면 해당 오브젝트를 흑색으로 칠한다.
5.회색집합이 모두 없어지면 남아있는 백색 오브젝트만 남으며 해당 메모리는 재사용이 가능해진다(GC)

이 작업이 진행동안 뮤테이터 어플리케이션이 실행된다.
뮤테이터는 쓰기장벽함수를 실행하여 힙에 있는 오브젝트의 포인터가 변경하면(접근이 가능하다면)
이를 회색으로 칠하여 회색집합에 넣는다.


runtime.GC()로 강제 수거가 가능
단 호출시 작업이 완료될때까지 프로그램이 정지하게 된다.

GC 과정에서는 프로그램이 일시적으로 중지된다. 이렇기에 실제 프로세스에 지연시간이 발생한다
GO 언어는 GC를 동시성프로세스로 실행하고 삼석알고리즘을 적용해서 지연시간을 줄이고 있다

unsafe 코드
타입 안정성, 메모리보안검사를 거치지 않는 코드